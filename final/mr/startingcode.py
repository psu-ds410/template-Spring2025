### Warning ####
### DO not edit this file!!!!
### Copy the code into mr_final.py and edit that file

from mrjob.job import MRJob
from mrjob.step import MRStep

class MyQuery(MRJob):
    def mapper_mystery(self, _, line):
        parts = line.split("\t")
        if len(parts) == 5 and not parts[0].startswith("InvoiceNo"): # orders
            (orderid, itemid, quantity, date, cid) = parts
            yield (cid, orderid), int(quantity)


    def reducer_mystery(self, cid_orderid, quantitylist):
        yield cid_orderid, sum(quantitylist)


    def mapper_enigma(self, cid_orderid, quantity):
        (cid, orderid) = cid_orderid
        yield cid, (quantity, 1)

    def reducer_enigma(self, key, valuelist):
        quantities = 0
        orders = 0
        for (a, b) in valuelist:
            quantities = quantities + a
            orders = orders + b
        if orders > 1:
            yield key, quantities/orders

    def steps(self):
        return [
            #MRStep(mapper=self.mapper_mystery, reducer=self.reducer_mystery, combiner=self.combiner_mystery),
            #MRStep(mapper=self.mapper_enigma, reducer=self.reducer_enigma, combiner=self.combiner_enigma)
            MRStep(mapper=self.mapper_mystery, reducer=self.reducer_mystery),
            MRStep(mapper=self.mapper_enigma, reducer=self.reducer_enigma)
        ]


if __name__ == '__main__':
    MyQuery.run()   # MRJob version

